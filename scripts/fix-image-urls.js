// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config({ path: '.env.local' });

const { createClient } = require('@supabase/supabase-js');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function fixImageUrls() {
  try {
    console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º protocol-relative URLs –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    let totalProcessed = 0;
    let totalUpdated = 0;
    let offset = 0;
    const pageSize = 1000;
    
    while (true) {
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å protocol-relative URLs
      const { data: services, error: servicesError } = await supabase
        .from('ai_services')
        .select('id, logo_url, cover_url')
        .or('logo_url.like.//%, cover_url.like.//%')
        .range(offset, offset + pageSize - 1);
      
      if (servicesError) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤: ${servicesError.message}`);
      }
      
      if (!services || services.length === 0) {
        console.log('üìã –í—Å–µ –∑–∞–ø–∏—Å–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã');
        break;
      }
      
      console.log(`üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${services.length} —Å–µ—Ä–≤–∏—Å–æ–≤ (offset: ${offset})`);
      
      let batchUpdated = 0;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ—Ä—Ü–∏—é
      for (const service of services) {
        let needsUpdate = false;
        const updates = {};
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º logo_url
        if (service.logo_url && service.logo_url.startsWith('//')) {
          updates.logo_url = `https:${service.logo_url}`;
          needsUpdate = true;
        }
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º cover_url
        if (service.cover_url && service.cover_url.startsWith('//')) {
          updates.cover_url = `https:${service.cover_url}`;
          needsUpdate = true;
        }
        
        if (needsUpdate) {
          const { error: updateError } = await supabase
            .from('ai_services')
            .update(updates)
            .eq('id', service.id);
          
          if (updateError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ ${service.id}:`, updateError);
          } else {
            batchUpdated++;
          }
        }
      }
      
      totalProcessed += services.length;
      totalUpdated += batchUpdated;
      
      console.log(`üìä –ü–æ—Ä—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: +${batchUpdated} –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
      console.log(`üìà –í—Å–µ–≥–æ: ${totalProcessed} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, ${totalUpdated} –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
      
      offset += pageSize;
      
      // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ –∑–∞–ø–∏—Å–µ–π —á–µ–º –æ–∂–∏–¥–∞–ª–∏
      if (services.length < pageSize) {
        break;
      }
    }
    
    console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${totalUpdated} —Å–µ—Ä–≤–∏—Å–æ–≤`);
    
  } catch (error) {
    console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

fixImageUrls(); 