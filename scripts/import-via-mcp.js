const fs = require('fs');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV —Å —É—á–µ—Ç–æ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö –ø–æ–ª–µ–π
function parseCSVLine(line, inQuotes = false) {
  const result = [];
  let current = '';
  let insideQuotes = inQuotes;
  
  for (let i = 0; i < line.length; i++) {
    const char = line[i];
    const nextChar = line[i + 1];
    
    if (char === '"') {
      if (insideQuotes && nextChar === '"') {
        // Escaped quote
        current += '"';
        i++; // Skip next quote
      } else {
        // Toggle quote state
        insideQuotes = !insideQuotes;
      }
    } else if (char === ';' && !insideQuotes) {
      // Field separator
      result.push(current.trim());
      current = '';
    } else {
      current += char;
    }
  }
  
  // Add the last field
  result.push(current.trim());
  
  return { fields: result, stillInQuotes: insideQuotes };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
function cleanData(value) {
  if (!value || value === '' || value === 'null' || value === 'undefined') {
    return null;
  }
  return value.trim().replace(/'/g, "''"); // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è SQL
}

function parseDate(dateStr) {
  if (!dateStr) return null;
  
  try {
    if (dateStr.includes('am') || dateStr.includes('pm')) {
      return new Date(dateStr).toISOString();
    }
    
    const date = new Date(dateStr);
    if (isNaN(date.getTime())) {
      return null;
    }
    
    return date.toISOString();
  } catch (error) {
    return null;
  }
}

function parseNumber(value) {
  if (!value || value === '') return null;
  const num = parseFloat(value.replace(',', '.'));
  return isNaN(num) ? null : num;
}

// –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è -> ID)
const categoryMapping = {
  '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è': 10,
  '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π': 10,
  '–ë–æ–ª—å—à–∏–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏': 6,
  '–ß–∞—Ç-–±–æ—Ç—ã': 7,
  '–ê—É–¥–∏–æ': 12,
  '–ú—É–∑—ã–∫–∞': 12,
  '–í–∏–¥–µ–æ': 9,
  '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': 17,
  '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è': 17,
  '–¢–µ–∫—Å—Ç': 11,
  '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö': 3,
  '–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã': 4,
  'Email': 14,
  '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å': 15,
  '–ë–∏–∑–Ω–µ—Å –∏ —Å—Ç–∞—Ä—Ç–∞–ø—ã': 16,
  '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ –¥–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞': 18,
  '–ó–¥–æ—Ä–æ–≤—å–µ –∏ —Ñ–∏—Ç–Ω–µ—Å': 19,
  '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ –ø—Ä–æ–¥–∞–∂–∏': 20,
  '–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏': 21,
  '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤': 22,
  '–û–±—É—á–µ–Ω–∏–µ, –≥–∞–π–¥—ã –∏ –∫–æ—É—á–∏–Ω–≥': 23,
  '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π': 24,
  '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ IT': 25,
  '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': 26,
  '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã': 27,
  '–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞': 28,
  '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏': 29,
  'E-commerce': 13,
  '–î—Ä—É–≥–æ–µ': 5
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞
function processCSVData() {
  console.log('üöÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º CSV —Ñ–∞–π–ª...');
  
  const csvPath = '/Users/cursor/Desktop/GigHub/–ò–ò-—Å–µ—Ä–≤–∏—Å—ã –±–∞–∑–∞.csv';
  
  if (!fs.existsSync(csvPath)) {
    console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${csvPath}`);
    return;
  }
  
  const fileContent = fs.readFileSync(csvPath, 'utf-8');
  const lines = fileContent.split('\n');
  
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${lines.length} —Å—Ç—Ä–æ–∫ –≤ CSV —Ñ–∞–π–ª–µ`);
  
  // –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const headers = lines[0].split(';').map(h => h.trim());
  console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏:', headers);
  
  let processedRows = 0;
  let currentRecord = [];
  let inMultilineField = false;
  let sqlInserts = [];
  
  for (let i = 1; i < lines.length && processedRows < 1000; i++) { // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–æ 1000
    const line = lines[i].trim();
    
    if (!line) continue;
    
    try {
      const parseResult = parseCSVLine(line, inMultilineField);
      
      if (inMultilineField) {
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–ø–∏—Å—å
        const lastFieldIndex = currentRecord.length - 1;
        currentRecord[lastFieldIndex] += '\\n' + parseResult.fields[0];
        
        if (!parseResult.stillInQuotes) {
          // –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ –ø–æ–ª–µ
          for (let j = 1; j < parseResult.fields.length; j++) {
            currentRecord.push(parseResult.fields[j]);
          }
          inMultilineField = false;
        }
      } else {
        currentRecord = parseResult.fields;
        inMultilineField = parseResult.stillInQuotes;
      }
      
      // –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞
      if (!inMultilineField && currentRecord.length >= headers.length) {
        processedRows++;
        
        // –ú–∞–ø–ø–∏–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø–æ–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const record = {
          id: parseInt(currentRecord[0]?.split('x')[0]) || null,
          sort_order: parseNumber(currentRecord[1]),
          faq_en: cleanData(currentRecord[2]),
          faq_ru: cleanData(currentRecord[3]),
          date_added: parseDate(currentRecord[4]),
          title: cleanData(currentRecord[5]),
          ai_category: cleanData(currentRecord[6]),
          bookmarks_count: parseNumber(currentRecord[7]),
          short_description_ru: cleanData(currentRecord[8]),
          logo_url: cleanData(currentRecord[9]),
          disadvantages_ru: cleanData(currentRecord[10]),
          cover_url: cleanData(currentRecord[11]),
          advantages_ru: cleanData(currentRecord[12]),
          full_description_ru: cleanData(currentRecord[13]),
          rating: parseNumber(currentRecord[14]) || parseNumber(currentRecord[15]),
          service_url: cleanData(currentRecord[16]),
          price: cleanData(currentRecord[17]),
          slug: cleanData(currentRecord[18])
        };
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º category_id –Ω–∞ –æ—Å–Ω–æ–≤–µ ai_category
        if (record.ai_category && categoryMapping[record.ai_category]) {
          record.category_id = categoryMapping[record.ai_category];
        }
        
        // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (!record.title) {
          console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è: —Å—Ç—Ä–æ–∫–∞ ${i}`);
          currentRecord = [];
          continue;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL INSERT
        const fields = [];
        const values = [];
        
        Object.keys(record).forEach(key => {
          if (record[key] !== null && record[key] !== undefined && record[key] !== '') {
            fields.push(key);
            if (typeof record[key] === 'string') {
              values.push(`'${record[key]}'`);
            } else {
              values.push(record[key]);
            }
          }
        });
        
        if (fields.length > 0) {
          const sqlInsert = `INSERT INTO ai_services (${fields.join(', ')}) VALUES (${values.join(', ')});`;
          sqlInserts.push(sqlInsert);
        }
        
        currentRecord = [];
        
        if (processedRows % 10 === 0) {
          console.log(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedRows} –∑–∞–ø–∏—Å–µ–π...`);
        }
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ ${i}:`, error.message);
      currentRecord = [];
      inMultilineField = false;
    }
  }
  
  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:`);
  console.log(`- –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: ${processedRows}`);
  console.log(`- –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ SQL –∑–∞–ø—Ä–æ—Å–æ–≤: ${sqlInserts.length}`);
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º SQL –≤ —Ñ–∞–π–ª
  const sqlContent = sqlInserts.join('\n\n');
  fs.writeFileSync('/Users/cursor/Desktop/GigHub/scripts/import_data.sql', sqlContent);
  console.log('‚úÖ SQL –∫–æ–º–∞–Ω–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ scripts/import_data.sql');
  
  // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  console.log('\nüìù –ü–µ—Ä–≤—ã–µ 3 SQL –∫–æ–º–∞–Ω–¥—ã:');
  sqlInserts.slice(0, 3).forEach((sql, index) => {
    console.log(`${index + 1}. ${sql.substring(0, 200)}...`);
  });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
if (require.main === module) {
  processCSVData();
}

module.exports = { processCSVData }; 