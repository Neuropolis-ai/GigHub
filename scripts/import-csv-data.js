// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config({ path: '.env.local' });

const fs = require('fs');
const csv = require('csv-parser');
const { createClient } = require('@supabase/supabase-js');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY; // –ò—Å–ø–æ–ª—å–∑—É–µ–º anon key –µ—Å–ª–∏ service key –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
const supabase = createClient(supabaseUrl, supabaseServiceKey);

// –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ CSV –∫ –ø–æ–ª—è–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const columnMapping = {
  'id': 'id',
  'sort (–ø—Ä–æ—Å–º–æ—Ç—Ä)': 'sort_order',
  '–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã': 'faq',
  '–í–æ–ø—Ä–æ—Å—ã–∏–æ—Ç–≤–µ—Ç—ã (—Ä—É—Å)': 'faq_ru',
  '–î–∞—Ç–∞–¥–æ–±–∞–≤–ª–µ–Ω–∏—è': 'date_added',
  '–ó–∞–≥–æ–ª–æ–≤–æ–∫': 'title',
  '–ò–ò-–∫–∞—Ç–µ–≥–æ—Ä–∏—è': 'ai_category',
  '–ö–æ–ª-–≤–æ–∑–∞–∫–ª–∞–¥–æ–∫': 'bookmarks_count',
  '–ö—Ä–∞—Ç–∫–æ–µ–æ–ø–∏—Å–∞–Ω–∏–µ (—Ä—É—Å)': 'short_description_ru',
  '–õ–æ–≥–æ—Ç–∏–ø': 'logo_url',
  '–ú–∏–Ω—É—Å—ã —Å–µ—Ä–≤–∏—Å–∞ (—Ä—É—Å)': 'disadvantages_ru',
  '–û–±–ª–æ–∂–∫–∞': 'cover_url',
  '–ü–ª—é—Å—ã—Å–µ—Ä–≤–∏—Å–∞ (—Ä—É—Å)': 'advantages_ru',
  '–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (—Ä—É—Å)': 'full_description_ru',
  '—Ä–µ–π—Ç–∏–Ω–≥': 'rating',
  '–†–µ–π—Ç–∏–Ω–≥': 'rating',
  '–°—Å—ã–ª–∫–∞–Ω–∞—Å–µ—Ä–≤–∏—Å': 'service_url',
  '–¶–µ–Ω–∞': 'price',
  'Slug': 'slug'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
function cleanAndTransformData(row) {
  const cleaned = {};
  
  for (const [csvCol, dbCol] of Object.entries(columnMapping)) {
    let value = row[csvCol];
    
    if (value === undefined || value === null || value === '') {
      value = null;
    } else if (typeof value === 'string') {
      value = value.trim();
      if (value === '') value = null;
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
    switch (dbCol) {
      case 'id':
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—É—é —á–∞—Å—Ç—å –∏–∑ ID, –µ—Å–ª–∏ –æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ timestamp
        if (typeof value === 'string' && value.includes('x')) {
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö—ç—à–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ ID
          cleaned[dbCol] = Math.abs(hashCode(value));
        } else {
          cleaned[dbCol] = parseInt(value) || Math.floor(Math.random() * 1000000);
        }
        break;
      case 'sort_order':
      case 'bookmarks_count':
        cleaned[dbCol] = parseInt(value) || 0;
        break;
      case 'rating':
        cleaned[dbCol] = parseFloat(value) || 0;
        break;
      case 'date_added':
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç ISO
        if (value) {
          try {
            const date = new Date(value);
            cleaned[dbCol] = date.toISOString();
          } catch (e) {
            cleaned[dbCol] = new Date().toISOString();
          }
        }
        break;
      default:
        cleaned[dbCol] = value;
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
  cleaned.status = 'active';
  cleaned.created_at = new Date().toISOString();
  cleaned.updated_at = new Date().toISOString();
  
  return cleaned;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö—ç—à–∞ —Å—Ç—Ä–æ–∫–∏
function hashCode(str) {
  let hash = 0;
  for (let i = 0; i < str.length; i++) {
    const char = str.charCodeAt(i);
    hash = ((hash << 5) - hash) + char;
    hash = hash & hash; // Convert to 32bit integer
  }
  return hash;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞
async function importCSVData() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV...');
  
  const records = [];
  const batchSize = 100; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ 100 –∑–∞–ø–∏—Å–µ–π –∑–∞ —Ä–∞–∑
  let totalProcessed = 0;
  let totalErrors = 0;
  
  return new Promise((resolve, reject) => {
    fs.createReadStream('–ò–ò-—Å–µ—Ä–≤–∏—Å—ã –±–∞–∑–∞.csv')
      .pipe(csv({ separator: ';' })) // CSV –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ; –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
      .on('data', (row) => {
        try {
          const cleanedData = cleanAndTransformData(row);
          records.push(cleanedData);
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç –∫–æ–≥–¥–∞ –¥–æ—Å—Ç–∏–≥–∞–µ–º —Ä–∞–∑–º–µ—Ä–∞
          if (records.length >= batchSize) {
            processBatch([...records]);
            records.length = 0; // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏:', error);
          totalErrors++;
        }
      })
      .on('end', async () => {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø–∏—Å–∏
        if (records.length > 0) {
          await processBatch(records);
        }
        
        console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalProcessed}, –û—à–∏–±–æ–∫: ${totalErrors}`);
        resolve();
      })
      .on('error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
        reject(error);
      });
  });
  
  async function processBatch(batch) {
    try {
      console.log(`üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç –∏–∑ ${batch.length} –∑–∞–ø–∏—Å–µ–π...`);
      
      const { data, error } = await supabase
        .from('ai_services')
        .upsert(batch, {
          onConflict: 'id',
          ignoreDuplicates: false
        });
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –ø–∞–∫–µ—Ç–∞:', error);
        totalErrors += batch.length;
      } else {
        totalProcessed += batch.length;
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${batch.length} –∑–∞–ø–∏—Å–µ–π. –í—Å–µ–≥–æ: ${totalProcessed}`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–∞:', error);
      totalErrors += batch.length;
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async function createMissingCategories() {
  console.log('üìÇ –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
  
  // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ CSV
  const categories = new Set();
  
  return new Promise((resolve, reject) => {
    fs.createReadStream('–ò–ò-—Å–µ—Ä–≤–∏—Å—ã –±–∞–∑–∞.csv')
      .pipe(csv({ separator: ';' }))
      .on('data', (row) => {
        const category = row['–ò–ò-–∫–∞—Ç–µ–≥–æ—Ä–∏—è'];
        if (category && category.trim()) {
          categories.add(category.trim());
        }
      })
      .on('end', async () => {
        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${categories.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
        
        for (const categoryName of categories) {
          try {
            const slug = categoryName.toLowerCase()
              .replace(/[^a-zA-Z–∞-—è—ë0-9]/g, '-')
              .replace(/-+/g, '-')
              .replace(/^-|-$/g, '');
            
            const { error } = await supabase
              .from('categories')
              .upsert({
                name: categoryName,
                slug: slug,
                description: `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName}`,
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString()
              }, {
                onConflict: 'slug',
                ignoreDuplicates: true
              });
            
            if (error && !error.message.includes('duplicate')) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryName}:`, error);
            } else {
              console.log(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${categoryName}" —Å–æ–∑–¥–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
            }
          } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryName}:`, error);
          }
        }
        
        resolve();
      })
      .on('error', reject);
  });
}

// –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞
async function main() {
  try {
    console.log('üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');
    
    if (!supabaseUrl || !supabaseServiceKey) {
      throw new Error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE');
    }
    
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await createMissingCategories();
    
    // –ó–∞—Ç–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    await importCSVData();
    
    console.log('üéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!');
  } catch (error) {
    console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = { importCSVData, createMissingCategories }; 