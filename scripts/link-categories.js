// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config({ path: '.env.local' });

const { createClient } = require('@supabase/supabase-js');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function linkCategories() {
  try {
    console.log('üîó –ù–∞—á–∏–Ω–∞–µ–º —Å–≤—è–∑–∫—É —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const { data: categories, error: categoriesError } = await supabase
      .from('categories')
      .select('id, name');
    
    if (categoriesError) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoriesError.message}`);
    }
    
    console.log(`üìÇ –ù–∞–π–¥–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
    
    // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ -> id
    const categoryMap = {};
    categories.forEach(cat => {
      categoryMap[cat.name] = cat.id;
    });
    
    let totalProcessed = 0;
    let totalUpdated = 0;
    let totalNotFound = 0;
    let offset = 0;
    const pageSize = 1000;
    
    while (true) {
      // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –±–µ–∑ category_id –ø–æ—Ä—Ü–∏—è–º–∏
      const { data: services, error: servicesError } = await supabase
        .from('ai_services')
        .select('id, ai_category')
        .is('category_id', null)
        .range(offset, offset + pageSize - 1);
      
      if (servicesError) {
        throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤: ${servicesError.message}`);
      }
      
      if (!services || services.length === 0) {
        console.log('üìã –í—Å–µ –∑–∞–ø–∏—Å–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã');
        break;
      }
      
      console.log(`üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${services.length} —Å–µ—Ä–≤–∏—Å–æ–≤ (offset: ${offset})`);
      
      let batchUpdated = 0;
      let batchNotFound = 0;
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ—Ä—Ü–∏—é
      for (const service of services) {
        const categoryId = categoryMap[service.ai_category];
        
        if (categoryId) {
          // –û–±–Ω–æ–≤–ª—è–µ–º category_id
          const { error: updateError } = await supabase
            .from('ai_services')
            .update({ category_id: categoryId })
            .eq('id', service.id);
          
          if (updateError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ ${service.id}:`, updateError);
          } else {
            batchUpdated++;
          }
        } else {
          batchNotFound++;
          if (batchNotFound <= 5) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
            console.log(`‚ö†Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${service.ai_category}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ ${service.id}`);
          }
        }
      }
      
      totalProcessed += services.length;
      totalUpdated += batchUpdated;
      totalNotFound += batchNotFound;
      
      console.log(`üìä –ü–æ—Ä—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: +${batchUpdated} –æ–±–Ω–æ–≤–ª–µ–Ω–æ, +${batchNotFound} –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
      console.log(`üìà –í—Å–µ–≥–æ: ${totalProcessed} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, ${totalUpdated} –æ–±–Ω–æ–≤–ª–µ–Ω–æ, ${totalNotFound} –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
      
      offset += pageSize;
      
      // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ –∑–∞–ø–∏—Å–µ–π —á–µ–º –æ–∂–∏–¥–∞–ª–∏
      if (services.length < pageSize) {
        break;
      }
    }
    
    console.log(`‚úÖ –°–≤—è–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${totalUpdated} —Å–µ—Ä–≤–∏—Å–æ–≤, ${totalNotFound} –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
    
  } catch (error) {
    console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

linkCategories(); 