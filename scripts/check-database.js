// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config({ path: '.env.local' });

const { createClient } = require('@supabase/supabase-js');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkDatabase() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ ai_services
    const { count: totalServices, error: servicesError } = await supabase
      .from('ai_services')
      .select('*', { count: 'exact', head: true });
    
    if (servicesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Å–µ—Ä–≤–∏—Å–æ–≤:', servicesError);
    } else {
      console.log(`üìä –í—Å–µ–≥–æ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ –±–∞–∑–µ: ${totalServices}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    const { count: totalCategories, error: categoriesError } = await supabase
      .from('categories')
      .select('*', { count: 'exact', head: true });
    
    if (categoriesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', categoriesError);
    } else {
      console.log(`üìÇ –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –±–∞–∑–µ: ${totalCategories}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏–º–µ—é—Ç category_id
    const { count: servicesWithCategory, error: categoryLinkError } = await supabase
      .from('ai_services')
      .select('*', { count: 'exact', head: true })
      .not('category_id', 'is', null);
    
    if (categoryLinkError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:', categoryLinkError);
    } else {
      console.log(`üîó –°–µ—Ä–≤–∏—Å–æ–≤ —Å category_id: ${servicesWithCategory}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
    const { data: latestServices, error: latestError } = await supabase
      .from('ai_services')
      .select('id, title, ai_category, category_id, created_at')
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (latestError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π:', latestError);
    } else {
      console.log('üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π:');
      latestServices.forEach((service, index) => {
        console.log(`  ${index + 1}. ${service.title} (ID: ${service.id}, –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${service.ai_category}, Category_ID: ${service.category_id})`);
      });
    }
    
  } catch (error) {
    console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

checkDatabase(); 