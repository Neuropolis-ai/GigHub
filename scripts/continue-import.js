const fs = require('fs');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è SQL-–∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –±–∞—Ç—á–µ–π
function continueImport() {
  console.log('üöÄ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...');
  
  const commandsFile = '/Users/cursor/Desktop/GigHub/scripts/mass_import_commands.txt';
  
  if (!fs.existsSync(commandsFile)) {
    console.error(`‚ùå –§–∞–π–ª –∫–æ–º–∞–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${commandsFile}`);
    return;
  }
  
  const content = fs.readFileSync(commandsFile, 'utf-8');
  const allCommands = content.split('\n\n').filter(cmd => cmd.trim() && cmd.includes('INSERT'));
  
  console.log(`üìä –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥ –≤ —Ñ–∞–π–ª–µ: ${allCommands.length}`);
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–ø–µ—Ä–≤—ã–µ 10-15) –∏ –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 20
  const startIndex = 15; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
  const batchSize = 20;   // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ 20 –∑–∞–ø–∏—Å–µ–π
  
  const nextBatch = allCommands.slice(startIndex, startIndex + batchSize);
  
  console.log(`\nüìù –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (${nextBatch.length} —à—Ç—É–∫):`);
  console.log('–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ mcp_supabase_execute_sql:\n');
  
  nextBatch.forEach((cmd, index) => {
    console.log(`--- –ö–æ–º–∞–Ω–¥–∞ ${index + 1} ---`);
    console.log(cmd.trim());
    console.log('\n');
  });
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –±–∞—Ç—á –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
  const nextBatchFile = '/Users/cursor/Desktop/GigHub/scripts/next_batch_import.txt';
  fs.writeFileSync(nextBatchFile, nextBatch.join('\n\n'));
  
  console.log(`‚úÖ –°–ª–µ–¥—É—é—â–∏–π –±–∞—Ç—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${nextBatchFile}`);
  console.log(`üìà –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ —Å ${startIndex + 1} –ø–æ ${startIndex + nextBatch.length}`);
  
  return {
    totalCommands: allCommands.length,
    startIndex: startIndex + 1,
    endIndex: startIndex + nextBatch.length,
    batchSize: nextBatch.length,
    nextBatchFile
  };
}

if (require.main === module) {
  continueImport();
}

module.exports = { continueImport }; 