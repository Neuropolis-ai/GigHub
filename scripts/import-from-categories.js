const fs = require('fs');
const csv = require('csv-parser');
const { createClient } = require('@supabase/supabase-js');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabaseUrl = 'https://mjfkgzxcnoukmnyemyil.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1qZmtnenhjbm91a21ueWVteWlsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDkwMjA2ODUsImV4cCI6MjA2NDU5NjY4NX0.jlBo0GnE2hUZvL7Npnf4fHN7yjtEUjMbD5emuOhZyL4';

const supabase = createClient(supabaseUrl, supabaseKey);

// –ü—É—Ç–∏ –∫ CSV —Ñ–∞–π–ª–∞–º
const categoriesFilePath = path.join(__dirname, '../Data Base/–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ò–ò-—Å–µ—Ä–≤–∏—Å–æ–≤.csv');
const servicesFilePath = path.join(__dirname, '../Data Base/–ò–ò-—Å–µ—Ä–≤–∏—Å.csv');

// –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
const BATCH_SIZE = 100;
const DELAY_BETWEEN_BATCHES = 300; // –º—Å

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç—Ä–æ–∫
function cleanString(str) {
  if (!str || typeof str !== 'string') return null;
  
  return str
    .replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]/g, '') // –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    .replace(/\r\n/g, '\n') // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    .replace(/\r/g, '\n')
    .trim();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async function getExistingCategories() {
  try {
    const { data, error } = await supabase
      .from('categories')
      .select('id, name');
    
    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
      return {};
    }
    
    const categoryMap = {};
    data.forEach(cat => {
      categoryMap[cat.name] = cat.id;
    });
    
    return categoryMap;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    return {};
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –ø–∞–∫–µ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
async function importBatch(batch, retryCount = 0) {
  const maxRetries = 3;
  
  try {
    const { data, error } = await supabase
      .from('ai_services')
      .insert(batch);
    
    if (error) {
      if (retryCount < maxRetries) {
        console.log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/${maxRetries} –¥–ª—è –ø–∞–∫–µ—Ç–∞ –∏–∑ ${batch.length} –∑–∞–ø–∏—Å–µ–π`);
        await new Promise(resolve => setTimeout(resolve, 1000 * (retryCount + 1)));
        return await importBatch(batch, retryCount + 1);
      } else {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –ø–∞–∫–µ—Ç–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫:', error);
        return false;
      }
    }
    
    return true;
  } catch (error) {
    if (retryCount < maxRetries) {
      console.log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/${maxRetries} –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏:`, error.message);
      await new Promise(resolve => setTimeout(resolve, 1000 * (retryCount + 1)));
      return await importBatch(batch, retryCount + 1);
    } else {
      console.error('–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫:', error);
      return false;
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ CSV
async function loadServiceDetails() {
  console.log('üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å–æ–≤...');
  
  const serviceDetails = {};
  let processedRows = 0;
  
  return new Promise((resolve, reject) => {
    if (!fs.existsSync(servicesFilePath)) {
      console.log('‚ö†Ô∏è –§–∞–π–ª —Å –¥–µ—Ç–∞–ª—è–º–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      resolve(serviceDetails);
      return;
    }
    
    fs.createReadStream(servicesFilePath, { encoding: 'utf8' })
      .pipe(csv({
        skipEmptyLines: true,
        skipLinesWithError: true
      }))
      .on('data', (row) => {
        try {
          processedRows++;
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ URL –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
          const serviceUrl = cleanString(row['–°—Å—ã–ª–∫–∞–Ω–∞—Å–µ—Ä–≤–∏—Å']);
          const shortDesc = cleanString(row['–ö—Ä–∞—Ç–∫–æ–µ–æ–ø–∏—Å–∞–Ω–∏–µ (—Ä—É—Å)']);
          const fullDesc = cleanString(row['–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (—Ä—É—Å)']);
          const price = cleanString(row['–¶–µ–Ω–∞']);
          const disadvantages = cleanString(row['–ú–∏–Ω—É—Å—ã—Å–µ—Ä–≤–∏—Å–∞ (—Ä—É—Å)']);
          const faq = cleanString(row['–í–æ–ø—Ä–æ—Å—ã–∏–æ—Ç–≤–µ—Ç—ã']);
          const faqRu = cleanString(row['–í–æ–ø—Ä–æ—Å—ã–∏–æ—Ç–≤–µ—Ç—ã (—Ä—É—Å)']);
          
          // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ URL
          if (serviceUrl) {
            let serviceName = null;
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ URL
            try {
              const url = new URL(serviceUrl);
              serviceName = url.hostname.replace('www.', '').split('.')[0];
              serviceName = serviceName.charAt(0).toUpperCase() + serviceName.slice(1);
            } catch (e) {
              // –ï—Å–ª–∏ URL –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            }
            
            if (serviceName && (shortDesc || fullDesc)) {
              serviceDetails[serviceName.toLowerCase()] = {
                name: serviceName,
                service_url: serviceUrl,
                short_description: shortDesc,
                full_description: fullDesc,
                price: price,
                disadvantages: disadvantages,
                faq: faq,
                faq_ru: faqRu
              };
            }
          }
          
          if (processedRows % 10000 === 0) {
            console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedRows} —Å—Ç—Ä–æ–∫ –¥–µ—Ç–∞–ª–µ–π —Å–µ—Ä–≤–∏—Å–æ–≤`);
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ –¥–µ—Ç–∞–ª–µ–π:', error);
        }
      })
      .on('end', () => {
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(serviceDetails).length} –¥–µ—Ç–∞–ª–µ–π —Å–µ—Ä–≤–∏—Å–æ–≤ –∏–∑ ${processedRows} —Å—Ç—Ä–æ–∫`);
        resolve(serviceDetails);
      })
      .on('error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –¥–µ—Ç–∞–ª–µ–π:', error);
        resolve(serviceDetails); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π
      });
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞
async function importFromCategories() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –ò–ò-—Å–µ—Ä–≤–∏—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
  if (!fs.existsSync(categoriesFilePath)) {
    throw new Error(`CSV —Ñ–∞–π–ª –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: ${categoriesFilePath}`);
  }
  
  // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const categoryMap = await getExistingCategories();
  console.log(`üìÇ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –ë–î: ${Object.keys(categoryMap).length}`);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å–æ–≤
  const serviceDetails = await loadServiceDetails();
  
  // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  const { data: existingServices } = await supabase
    .from('ai_services')
    .select('name');
  
  const existingServiceNames = new Set(
    existingServices ? existingServices.map(s => s.name.toLowerCase()) : []
  );
  
  console.log(`üìã –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ –ë–î: ${existingServiceNames.size}`);
  
  let batch = [];
  let totalProcessed = 0;
  let totalImported = 0;
  let totalErrors = 0;
  let skippedServices = 0;
  let duplicateSkipped = 0;
  
  const startTime = Date.now();
  
  return new Promise((resolve, reject) => {
    fs.createReadStream(categoriesFilePath, { encoding: 'utf8' })
      .pipe(csv({
        skipEmptyLines: true,
        skipLinesWithError: true
      }))
      .on('data', async (row) => {
        try {
          const categoryName = cleanString(row['–ö–∞—Ç–µ–≥–æ—Ä–∏—è (option)']) || cleanString(row['–ù–∞–∑–≤–∞–Ω–∏–µ']);
          const servicesString = cleanString(row['–ò–ò-—Å–µ—Ä–≤–∏—Å—ã']);
          
          if (!categoryName || !servicesString || !categoryMap[categoryName]) {
            return;
          }
          
          const categoryId = categoryMap[categoryName];
          
          // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
          const serviceNames = servicesString
            .split(',')
            .map(name => name.trim())
            .filter(name => name.length > 0);
          
          console.log(`üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${categoryName}" —Å ${serviceNames.length} —Å–µ—Ä–≤–∏—Å–∞–º–∏`);
          
          for (const serviceName of serviceNames) {
            if (!serviceName || serviceName.length < 2) {
              skippedServices++;
              continue;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            if (existingServiceNames.has(serviceName.toLowerCase())) {
              duplicateSkipped++;
              console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç: ${serviceName}`);
              continue;
            }
            
            // –ò—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞
            const details = serviceDetails[serviceName.toLowerCase()] || {};
            
            const serviceData = {
              name: details.name || serviceName,
              short_description: details.short_description || null,
              full_description: details.full_description || null,
              price: details.price || null,
              service_url: details.service_url || null,
              disadvantages: details.disadvantages || null,
              faq: details.faq || null,
              faq_ru: details.faq_ru || null,
              category_id: categoryId,
              status: 'active'
            };
            
            batch.push(serviceData);
            totalProcessed++;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–∫—É—â–µ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
            existingServiceNames.add(serviceName.toLowerCase());
            
            // –ö–æ–≥–¥–∞ –ø–∞–∫–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ
            if (batch.length >= BATCH_SIZE) {
              const success = await importBatch(batch);
              if (success) {
                totalImported += batch.length;
                console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${batch.length} –∑–∞–ø–∏—Å–µ–π (–≤—Å–µ–≥–æ: ${totalImported})`);
              } else {
                totalErrors += batch.length;
                console.log(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ${batch.length} –∑–∞–ø–∏—Å–µ–π`);
              }
              
              batch = []; // –û—á–∏—â–∞–µ–º –ø–∞–∫–µ—Ç
              
              // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
              await new Promise(resolve => setTimeout(resolve, DELAY_BETWEEN_BATCHES));
            }
          }
          
          // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 1000 –∑–∞–ø–∏—Å–µ–π
          if (totalProcessed % 1000 === 0) {
            const elapsed = (Date.now() - startTime) / 1000;
            const rate = totalProcessed / elapsed;
            console.log(`üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalProcessed}, –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${totalImported}, –û—à–∏–±–æ–∫: ${totalErrors}, –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${duplicateSkipped}, –°–∫–æ—Ä–æ—Å—Ç—å: ${rate.toFixed(1)} –∑–∞–ø–∏—Å–µ–π/—Å–µ–∫`);
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
          totalErrors++;
        }
      })
      .on('end', async () => {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø–∏—Å–∏
        if (batch.length > 0) {
          console.log(`üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞–∫–µ—Ç –∏–∑ ${batch.length} –∑–∞–ø–∏—Å–µ–π...`);
          const success = await importBatch(batch);
          if (success) {
            totalImported += batch.length;
          } else {
            totalErrors += batch.length;
          }
        }
        
        const elapsed = (Date.now() - startTime) / 1000;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î
        const { data: finalData } = await supabase
          .from('ai_services')
          .select('id', { count: 'exact', head: true });
        const finalCount = finalData?.length || 0;
        
        console.log('\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
        console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
        console.log(`   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: ${totalProcessed}`);
        console.log(`   - –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: ${skippedServices}`);
        console.log(`   - –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicateSkipped}`);
        console.log(`   - –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${totalImported}`);
        console.log(`   - –û—à–∏–±–æ–∫: ${totalErrors}`);
        console.log(`   - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${elapsed.toFixed(1)} —Å–µ–∫—É–Ω–¥`);
        console.log(`   - –ò—Ç–æ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: ${finalCount}`);
        
        resolve({ 
          totalProcessed, 
          totalImported, 
          totalErrors, 
          skippedServices,
          duplicateSkipped,
          finalCount,
          elapsed 
        });
      })
      .on('error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
        reject(error);
      });
  });
}

// –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞
if (require.main === module) {
  importFromCategories()
    .then((result) => {
      console.log('‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω:', result);
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
      process.exit(1);
    });
}

module.exports = { importFromCategories }; 