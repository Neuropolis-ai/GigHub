const fs = require('fs');

function createBulkImport() {
  console.log('üöÄ –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è 13,000+ —Å–µ—Ä–≤–∏—Å–æ–≤...');
  
  const csvFile = '/Users/cursor/Desktop/GigHub/–ò–ò-—Å–µ—Ä–≤–∏—Å—ã –±–∞–∑–∞.csv';
  
  if (!fs.existsSync(csvFile)) {
    console.error(`‚ùå CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${csvFile}`);
    return;
  }
  
  console.log('üìñ –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª...');
  const csvContent = fs.readFileSync(csvFile, 'utf-8');
  const lines = csvContent.split('\n');
  
  console.log(`üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: ${lines.length}`);
  
  // –ë–µ—Ä–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const headers = lines[0].split(';').map(h => h.trim().replace(/"/g, ''));
  console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ CSV:', headers.slice(0, 10));
  
  // –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const categoryMapping = {
    '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è': 10,
    '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π': 10,
    '–ë–æ–ª—å—à–∏–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏': 6,
    '–ß–∞—Ç-–±–æ—Ç—ã': 7,
    '–ê—É–¥–∏–æ': 12,
    '–ú—É–∑—ã–∫–∞': 12,
    '–í–∏–¥–µ–æ': 9,
    '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': 17,
    '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è': 17,
    '–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞': 28,
    '–¢–µ–∫—Å—Ç': 11,
    '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞': 11,
    '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö': 3,
    '–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ': 8,
    '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞': 25,
    '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ IT': 25,
    '–ë–∏–∑–Ω–µ—Å': 16,
    '–ë–∏–∑–Ω–µ—Å –∏ —Å—Ç–∞—Ä—Ç–∞–ø—ã': 16,
    '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥': 18,
    'Email': 14,
    '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏': 21,
    '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': 23,
    '–û–±—É—á–µ–Ω–∏–µ, –≥–∞–π–¥—ã –∏ –∫–æ—É—á–∏–Ω–≥': 23,
    '–ó–¥–æ—Ä–æ–≤—å–µ': 15,
    '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': 24,
    'Lifestyle': 24,
    '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ lifestyle': 24,
    '–§–∏–Ω–∞–Ω—Å—ã': 13,
    '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã': 13,
    '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å': 5,
    '–î—Ä—É–≥–æ–µ': 5
  };
  
  // –°–æ–∑–¥–∞–µ–º –±–∞—Ç—á–∏ –ø–æ 1000 –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
  const batchSize = 1000;
  const batches = [];
  let processedRows = 0;
  let validRows = 0;
  
  console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ–º SQL –±–∞—Ç—á–∏...');
  
  for (let i = 1; i < lines.length && processedRows < 15000; i++) {
    const line = lines[i].trim();
    if (!line) continue;
    
    // –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –ø–æ —Ç–æ—á–∫–∞–º —Å –∑–∞–ø—è—Ç–æ–π (–∏–≥–Ω–æ—Ä–∏—Ä—É—è —Å–ª–æ–∂–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏)
    const fields = line.split(';').map(f => f.trim().replace(/^"|"$/g, ''));
    
    if (fields.length < 10) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø–æ–ª–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
    const title = fields[3] || `Service_${Date.now()}_${i}`;
    const category = fields[4] || '–î—Ä—É–≥–æ–µ';
    const categoryId = categoryMapping[category] || 5;
    const bookmarks = parseInt(fields[5]) || 0;
    const shortDesc = fields[6] || '';
    const logoUrl = fields[7] || null;
    const coverUrl = fields[8] || null;
    const fullDesc = fields[9] || '';
    const rating = parseFloat(fields[10]) || null;
    const serviceUrl = fields[11] || null;
    const price = fields[12] || null;
    const slug = fields[13] || title.toLowerCase().replace(/[^a-z0-9]/g, '-');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    const id = Date.now() + i + Math.floor(Math.random() * 1000);
    const sortOrder = i;
    const dateAdded = new Date().toISOString().split('T')[0];
    
    const values = `(${id}, ${sortOrder}, '${dateAdded}', ${escapeSQL(title)}, ${escapeSQL(category)}, ${bookmarks}, ${escapeSQL(shortDesc)}, ${escapeSQL(logoUrl)}, ${escapeSQL(coverUrl)}, ${escapeSQL(fullDesc)}, ${rating}, ${escapeSQL(serviceUrl)}, ${escapeSQL(price)}, ${escapeSQL(slug)}, ${categoryId})`;
    
    if (!batches[Math.floor(validRows / batchSize)]) {
      batches[Math.floor(validRows / batchSize)] = [];
    }
    
    batches[Math.floor(validRows / batchSize)].push(values);
    validRows++;
    processedRows++;
    
    if (processedRows % 1000 === 0) {
      console.log(`‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedRows} —Å—Ç—Ä–æ–∫...`);
    }
  }
  
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${batches.length} –±–∞—Ç—á–µ–π —Å ${validRows} –≤–∞–ª–∏–¥–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏`);
  
  // –°–æ–∑–¥–∞–µ–º SQL —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞—Ç—á–∞
  batches.forEach((batch, index) => {
    const sql = `INSERT INTO ai_services (id, sort_order, date_added, title, ai_category, bookmarks_count, short_description_ru, logo_url, cover_url, full_description_ru, rating, service_url, price, slug, category_id) VALUES\n${batch.join(',\n')};`;
    
    const filename = `/Users/cursor/Desktop/GigHub/scripts/bulk_batch_${index + 1}.sql`;
    fs.writeFileSync(filename, sql);
    console.log(`üìù –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: bulk_batch_${index + 1}.sql (${batch.length} –∑–∞–ø–∏—Å–µ–π)`);
  });
  
  // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Ç–µ—Ä-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –±–∞—Ç—á–µ–π
  const masterScript = batches.map((_, index) => 
    `-- –ë–∞—Ç—á ${index + 1}\n-- –í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ mcp_supabase_execute_sql\n-- ${fs.readFileSync(`/Users/cursor/Desktop/GigHub/scripts/bulk_batch_${index + 1}.sql`, 'utf-8').substring(0, 200)}...`
  ).join('\n\n');
  
  fs.writeFileSync('/Users/cursor/Desktop/GigHub/scripts/master_import_plan.txt', masterScript);
  
  console.log('\nüéØ –ü–ª–∞–Ω –º–∞—Å—Å–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω!');
  console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`   ‚Ä¢ –í—Å–µ–≥–æ –±–∞—Ç—á–µ–π: ${batches.length}`);
  console.log(`   ‚Ä¢ –ó–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–º –±–∞—Ç—á–µ: ~${batchSize}`);
  console.log(`   ‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${validRows}`);
  console.log(`   ‚Ä¢ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ scripts/bulk_batch_*.sql`);
  console.log(`   ‚Ä¢ –ü–ª–∞–Ω –∏–º–ø–æ—Ä—Ç–∞: scripts/master_import_plan.txt`);
  
  return {
    totalBatches: batches.length,
    totalRecords: validRows,
    batchSize,
    files: batches.map((_, i) => `bulk_batch_${i + 1}.sql`)
  };
}

function escapeSQL(value) {
  if (value === null || value === undefined) return 'NULL';
  if (typeof value === 'number') return value;
  return "'" + String(value).replace(/'/g, "''").substring(0, 1000) + "'";
}

if (require.main === module) {
  createBulkImport();
}

module.exports = { createBulkImport }; 