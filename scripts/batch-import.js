const fs = require('fs');

async function processBatch() {
  console.log('üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞—Ç—á-–∏–º–ø–æ—Ä—Ç–∞...');
  
  const sqlFile = '/Users/cursor/Desktop/GigHub/scripts/import_data.sql';
  
  if (!fs.existsSync(sqlFile)) {
    console.error(`‚ùå –§–∞–π–ª SQL –Ω–µ –Ω–∞–π–¥–µ–Ω: ${sqlFile}`);
    return;
  }
  
  const sqlContent = fs.readFileSync(sqlFile, 'utf-8');
  const sqlCommands = sqlContent.split('\n\n').filter(cmd => cmd.trim() && cmd.includes('INSERT'));
  
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${sqlCommands.length} SQL –∫–æ–º–∞–Ω–¥ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞`);
  
  // –°–æ–∑–¥–∞–µ–º –±–∞—Ç—á–∏ –ø–æ 10 –∫–æ–º–∞–Ω–¥
  const batchSize = 10;
  const batches = [];
  
  for (let i = 0; i < sqlCommands.length; i += batchSize) {
    batches.push(sqlCommands.slice(i, i + batchSize));
  }
  
  console.log(`üì¶ –°–æ–∑–¥–∞–Ω–æ ${batches.length} –±–∞—Ç—á–µ–π –ø–æ ${batchSize} –∫–æ–º–∞–Ω–¥ –∫–∞–∂–¥—ã–π`);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–π –±–∞—Ç—á –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
  batches.forEach((batch, index) => {
    const batchContent = batch.join('\n\n');
    const batchFile = `/Users/cursor/Desktop/GigHub/scripts/batch_${index + 1}.sql`;
    fs.writeFileSync(batchFile, batchContent);
    console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω batch_${index + 1}.sql (${batch.length} –∫–æ–º–∞–Ω–¥)`);
  });
  
  console.log('\nüéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–∞–∂–¥—ã–π –±–∞—Ç—á —á–µ—Ä–µ–∑ mcp_supabase_execute_sql');
  console.log('2. –ù–∞—á–Ω–∏—Ç–µ —Å batch_1.sql –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ –ø–æ—Ä—è–¥–∫—É');
  console.log('3. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –æ—à–∏–±–∫–∏');
  
  // –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –±–∞—Ç—á –¥–ª—è –Ω–∞—á–∞–ª–∞
  console.log('\nüìù –ü–µ—Ä–≤—ã–π –±–∞—Ç—á –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞:');
  const firstBatch = fs.readFileSync('/Users/cursor/Desktop/GigHub/scripts/batch_1.sql', 'utf-8');
  console.log(firstBatch.substring(0, 1000) + '...');
}

if (require.main === module) {
  processBatch().catch(console.error);
}

module.exports = { processBatch }; 