const fs = require('fs');
const csv = require('csv-parser');
const { createClient } = require('@supabase/supabase-js');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const supabaseUrl = 'https://mjfkgzxcnoukmnyemyil.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1qZmtnenhjbm91a21ueWVteWlsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDkwMjA2ODUsImV4cCI6MjA2NDU5NjY4NX0.jlBo0GnE2hUZvL7Npnf4fHN7yjtEUjMbD5emuOhZyL4';

const supabase = createClient(supabaseUrl, supabaseKey);

// –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
const csvFilePath = path.join(__dirname, '../Data Base/–ò–ò-—Å–µ—Ä–≤–∏—Å.csv');

// –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ (—É–º–µ–Ω—å—à–µ–Ω –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
const BATCH_SIZE = 50;
const DELAY_BETWEEN_BATCHES = 200; // –º—Å

// –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const categoryMapping = {
  'E-commerce': 1,
  'Email': 2,
  '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö': 3,
  '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ –¥–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞': 4,
  '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å': 5,
  '–ë–∏–∑–Ω–µ—Å –∏ —Å—Ç–∞—Ä—Ç–∞–ø—ã': 6,
  '–ë–æ–ª—å—à–∏–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏': 7,
  '–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã': 8,
  '–í–∏–¥–µ–æ': 9,
  '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è': 10,
  '–¢–µ–∫—Å—Ç': 11,
  '–ê—É–¥–∏–æ': 12,
  '–ó–¥–æ—Ä–æ–≤—å–µ –∏ —Ñ–∏—Ç–Ω–µ—Å': 13,
  '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ –ø—Ä–æ–¥–∞–∂–∏': 14,
  '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤': 15,
  '–û–±—É—á–µ–Ω–∏–µ, –≥–∞–π–¥—ã –∏ –∫–æ—É—á–∏–Ω–≥': 16,
  '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': 17,
  '–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏': 18
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç—Ä–æ–∫ –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
function cleanString(str) {
  if (!str || typeof str !== 'string') return null;
  
  return str
    .replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]/g, '') // –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    .replace(/\r\n/g, '\n') // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    .replace(/\r/g, '\n')
    .trim();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
function cleanData(row) {
  const name = cleanString(row['–ù–∞–∑–≤–∞–Ω–∏–µ']) || cleanString(row['–ò–ò-—Å–µ—Ä–≤–∏—Å—ã']) || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å';
  
  return {
    name: name.substring(0, 255), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    price: cleanString(row['–¶–µ–Ω–∞'])?.substring(0, 100),
    service_url: cleanString(row['–°—Å—ã–ª–∫–∞–Ω–∞—Å–µ—Ä–≤–∏—Å'])?.substring(0, 500),
    disadvantages: cleanString(row['–ú–∏–Ω—É—Å—ã—Å–µ—Ä–≤–∏—Å–∞ (—Ä—É—Å)']),
    short_description: cleanString(row['–ö—Ä–∞—Ç–∫–æ–µ–æ–ø–∏—Å–∞–Ω–∏–µ (—Ä—É—Å)']),
    full_description: cleanString(row['–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (—Ä—É—Å)']),
    faq: cleanString(row['–í–æ–ø—Ä–æ—Å—ã–∏–æ—Ç–≤–µ—Ç—ã']),
    faq_ru: cleanString(row['–í–æ–ø—Ä–æ—Å—ã–∏–æ—Ç–≤–µ—Ç—ã (—Ä—É—Å)']),
    category_id: null,
    status: 'active'
  };
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function determineCategoryId(serviceName, description) {
  const text = (serviceName + ' ' + (description || '')).toLowerCase();
  
  // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const patterns = {
    'Email': ['email', 'mail', '–ø–æ—á—Ç', '–ø–∏—Å—å–º', '—Ä–∞—Å—Å—ã–ª–∫'],
    '–í–∏–¥–µ–æ': ['video', '–≤–∏–¥–µ–æ', '—Ñ–∏–ª—å–º', 'movie', 'cinema', 'youtube', 'streaming'],
    '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è': ['image', 'photo', '–∏–∑–æ–±—Ä–∞–∂', '–∫–∞—Ä—Ç–∏–Ω–∫', '—Ñ–æ—Ç–æ', 'picture', 'graphic', 'visual'],
    '–¢–µ–∫—Å—Ç': ['text', '—Ç–µ–∫—Å—Ç', 'writing', '–ø–∏—Å–∞—Ç—å', '—Ä–µ–¥–∞–∫—Ç–æ—Ä', 'editor', 'content', '–∫–æ–Ω—Ç–µ–Ω—Ç'],
    '–ê—É–¥–∏–æ': ['audio', 'music', '–∞—É–¥–∏–æ', '–º—É–∑—ã–∫', '–∑–≤—É–∫', 'sound', 'voice', '–≥–æ–ª–æ—Å'],
    '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö': ['analytics', 'data', '–∞–Ω–∞–ª–∏—Ç–∏–∫', '–¥–∞–Ω–Ω', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫', 'metric', 'dashboard'],
    '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ –¥–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞': ['design', '–¥–∏–∑–∞–π–Ω', 'interior', '–∏–Ω—Ç–µ—Ä—å–µ—Ä', '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä', 'architecture'],
    '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å': ['security', '–±–µ–∑–æ–ø–∞—Å–Ω', '–∑–∞—â–∏—Ç', 'protect', 'cyber', '–∫–∏–±–µ—Ä–±'],
    '–ë–∏–∑–Ω–µ—Å –∏ —Å—Ç–∞—Ä—Ç–∞–ø—ã': ['business', '–±–∏–∑–Ω–µ—Å', 'startup', '—Å—Ç–∞—Ä—Ç–∞–ø', '–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç', 'entrepreneur'],
    '–ó–¥–æ—Ä–æ–≤—å–µ –∏ —Ñ–∏—Ç–Ω–µ—Å': ['health', 'fitness', '–∑–¥–æ—Ä–æ–≤', '—Ñ–∏—Ç–Ω–µ—Å', '–º–µ–¥–∏—Ü–∏–Ω', 'medical'],
    '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ –ø—Ä–æ–¥–∞–∂–∏': ['marketing', 'sales', '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '–ø—Ä–æ–¥–∞–∂', '—Ä–µ–∫–ª–∞–º', 'advertising'],
    '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤': ['support', 'customer', '–ø–æ–¥–¥–µ—Ä–∂–∫', '–∫–ª–∏–µ–Ω—Ç', 'service', 'help'],
    '–û–±—É—á–µ–Ω–∏–µ, –≥–∞–π–¥—ã –∏ –∫–æ—É—á–∏–Ω–≥': ['education', 'learning', '–æ–±—É—á–µ–Ω', '—É—á–µ–±', 'course', 'tutorial', 'coaching'],
    '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': ['productivity', '–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω', '—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω', 'task', '–∑–∞–¥–∞—á', '–ø–ª–∞–Ω–∏—Ä–æ–≤'],
    '–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã': ['avatar', '–∞–≤–∞—Ç–∞—Ä', 'virtual', '–≤–∏—Ä—Ç—É–∞–ª—å–Ω', 'character', '–ø–µ—Ä—Å–æ–Ω–∞–∂'],
    '–ë–æ–ª—å—à–∏–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏': ['gpt', 'llm', 'language model', '—è–∑—ã–∫–æ–≤', 'chatbot', '—á–∞—Ç–±–æ—Ç', 'ai assistant'],
    'E-commerce': ['ecommerce', 'shop', 'store', '–º–∞–≥–∞–∑–∏–Ω', '—Ç–æ—Ä–≥–æ–≤–ª', '–ø—Ä–æ–¥–∞–∂', 'commerce'],
    '–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏': ['lifestyle', '–æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏', '–∂–∏–∑–Ω', 'personal', '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω']
  };
  
  for (const [category, keywords] of Object.entries(patterns)) {
    if (keywords.some(keyword => text.includes(keyword))) {
      return categoryMapping[category];
    }
  }
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  return categoryMapping['–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –ø–∞–∫–µ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async function importBatch(batch, retryCount = 0) {
  const maxRetries = 3;
  
  try {
    const { data, error } = await supabase
      .from('ai_services')
      .insert(batch);
    
    if (error) {
      if (retryCount < maxRetries) {
        console.log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/${maxRetries} –¥–ª—è –ø–∞–∫–µ—Ç–∞ –∏–∑ ${batch.length} –∑–∞–ø–∏—Å–µ–π`);
        await new Promise(resolve => setTimeout(resolve, 1000 * (retryCount + 1)));
        return await importBatch(batch, retryCount + 1);
      } else {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –ø–∞–∫–µ—Ç–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫:', error);
        return false;
      }
    }
    
    return true;
  } catch (error) {
    if (retryCount < maxRetries) {
      console.log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/${maxRetries} –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏:`, error.message);
      await new Promise(resolve => setTimeout(resolve, 1000 * (retryCount + 1)));
      return await importBatch(batch, retryCount + 1);
    } else {
      console.error('–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫:', error);
      return false;
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
async function getExistingCount() {
  try {
    const { data, error } = await supabase
      .from('ai_services')
      .select('id', { count: 'exact', head: true });
    
    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π:', error);
      return 0;
    }
    
    return data?.length || 0;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    return 0;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞
async function importAIServices() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –ò–ò-—Å–µ—Ä–≤–∏—Å–æ–≤...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
  if (!fs.existsSync(csvFilePath)) {
    throw new Error(`CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${csvFilePath}`);
  }
  
  const existingCount = await getExistingCount();
  console.log(`üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: ${existingCount}`);
  
  let batch = [];
  let totalProcessed = 0;
  let totalImported = 0;
  let totalErrors = 0;
  let skippedRows = 0;
  
  const startTime = Date.now();
  
  return new Promise((resolve, reject) => {
    const stream = fs.createReadStream(csvFilePath, { encoding: 'utf8' })
      .pipe(csv({
        skipEmptyLines: true,
        skipLinesWithError: true
      }));
    
    stream.on('data', async (row) => {
      try {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        if (!row || Object.keys(row).length === 0) {
          skippedRows++;
          return;
        }
        
        const cleanedData = cleanData(row);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if (!cleanedData.name || cleanedData.name === '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å') {
          skippedRows++;
          return;
        }
        
        cleanedData.category_id = determineCategoryId(cleanedData.name, cleanedData.short_description);
        
        batch.push(cleanedData);
        totalProcessed++;
        
        // –ö–æ–≥–¥–∞ –ø–∞–∫–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ
        if (batch.length >= BATCH_SIZE) {
          stream.pause(); // –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á—Ç–µ–Ω–∏–µ
          
          const success = await importBatch(batch);
          if (success) {
            totalImported += batch.length;
            console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${batch.length} –∑–∞–ø–∏—Å–µ–π (–≤—Å–µ–≥–æ: ${totalImported})`);
          } else {
            totalErrors += batch.length;
            console.log(`‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ${batch.length} –∑–∞–ø–∏—Å–µ–π`);
          }
          
          batch = []; // –û—á–∏—â–∞–µ–º –ø–∞–∫–µ—Ç
          
          // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
          await new Promise(resolve => setTimeout(resolve, DELAY_BETWEEN_BATCHES));
          
          stream.resume(); // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —á—Ç–µ–Ω–∏–µ
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5000 –∑–∞–ø–∏—Å–µ–π
        if (totalProcessed % 5000 === 0) {
          const elapsed = (Date.now() - startTime) / 1000;
          const rate = totalProcessed / elapsed;
          console.log(`üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalProcessed}, –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${totalImported}, –û—à–∏–±–æ–∫: ${totalErrors}, –°–∫–æ—Ä–æ—Å—Ç—å: ${rate.toFixed(1)} –∑–∞–ø–∏—Å–µ–π/—Å–µ–∫`);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏:', error);
        totalErrors++;
      }
    });
    
    stream.on('end', async () => {
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø–∏—Å–∏
      if (batch.length > 0) {
        console.log(`üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞–∫–µ—Ç –∏–∑ ${batch.length} –∑–∞–ø–∏—Å–µ–π...`);
        const success = await importBatch(batch);
        if (success) {
          totalImported += batch.length;
        } else {
          totalErrors += batch.length;
        }
      }
      
      const elapsed = (Date.now() - startTime) / 1000;
      const finalCount = await getExistingCount();
      
      console.log('\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
      console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
      console.log(`   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: ${totalProcessed}`);
      console.log(`   - –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${skippedRows}`);
      console.log(`   - –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${totalImported}`);
      console.log(`   - –û—à–∏–±–æ–∫: ${totalErrors}`);
      console.log(`   - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${elapsed.toFixed(1)} —Å–µ–∫—É–Ω–¥`);
      console.log(`   - –ò—Ç–æ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: ${finalCount}`);
      
      resolve({ 
        totalProcessed, 
        totalImported, 
        totalErrors, 
        skippedRows,
        finalCount,
        elapsed 
      });
    });
    
    stream.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞:', error);
      reject(error);
    });
  });
}

// –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞
if (require.main === module) {
  importAIServices()
    .then((result) => {
      console.log('‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω:', result);
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
      process.exit(1);
    });
}

module.exports = { importAIServices }; 