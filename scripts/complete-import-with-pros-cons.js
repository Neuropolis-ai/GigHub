const fs = require('fs');

function createCompleteImport() {
  console.log('üöÄ –°–æ–∑–¥–∞–µ–º –ü–û–õ–ù–´–ô –∏–º–ø–æ—Ä—Ç —Å –ø–ª—é—Å–∞–º–∏, –º–∏–Ω—É—Å–∞–º–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏...');
  
  const csvFile = '/Users/cursor/Desktop/GigHub/–ò–ò-—Å–µ—Ä–≤–∏—Å—ã –±–∞–∑–∞.csv';
  
  if (!fs.existsSync(csvFile)) {
    console.error(`‚ùå CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${csvFile}`);
    return;
  }
  
  console.log('üìñ –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª...');
  const csvContent = fs.readFileSync(csvFile, 'utf-8');
  const lines = csvContent.split('\n');
  
  console.log(`üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: ${lines.length}`);
  
  // –ë–µ—Ä–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —É–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏
  const headers = lines[0].split(';').map(h => h.trim().replace(/"/g, ''));
  console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ CSV:', headers);
  
  // –ú–∞–ø–ø–∏–Ω–≥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∫ –Ω–∞—à–∏–º –ø–æ–ª—è–º
  const headerMapping = {
    'id': 'id',
    'sort (–ø—Ä–æ—Å–º–æ—Ç—Ä)': 'sort_order',
    '–î–∞—Ç–∞–¥–æ–±–∞–≤–ª–µ–Ω–∏—è': 'date_added',
    '–ó–∞–≥–æ–ª–æ–≤–æ–∫': 'title',
    '–ò–ò-–∫–∞—Ç–µ–≥–æ—Ä–∏—è': 'ai_category',
    '–ö–æ–ª-–≤–æ–∑–∞–∫–ª–∞–¥–æ–∫': 'bookmarks_count',
    '–ö—Ä–∞—Ç–∫–æ–µ–æ–ø–∏—Å–∞–Ω–∏–µ (—Ä—É—Å)': 'short_description_ru',
    '–ü–ª—é—Å—ã—Å–µ—Ä–≤–∏—Å–∞ (—Ä—É—Å)': 'pros_ru',
    '–ú–∏–Ω—É—Å—ã —Å–µ—Ä–≤–∏—Å–∞ (—Ä—É—Å)': 'cons_ru',
    '–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (—Ä—É—Å)': 'full_description_ru',
    '–õ–æ–≥–æ—Ç–∏–ø': 'logo_url',
    '–û–±–ª–æ–∂–∫–∞': 'cover_url',
    '—Ä–µ–π—Ç–∏–Ω–≥': 'rating',
    '–°—Å—ã–ª–∫–∞–Ω–∞—Å–µ—Ä–≤–∏—Å': 'service_url',
    '–¶–µ–Ω–∞': 'price',
    'Slug': 'slug'
  };
  
  console.log('üóÇÔ∏è –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π:', headerMapping);
  
  // –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const categoryMapping = {
    '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è': 10,
    '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π': 10,
    '–ë–æ–ª—å—à–∏–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏': 1,
    '–ß–∞—Ç-–±–æ—Ç—ã': 2,
    '–¢–µ–∫—Å—Ç': 3,
    '–ê—É–¥–∏–æ': 4,
    '–í–∏–¥–µ–æ': 5,
    '–û–±—É—á–µ–Ω–∏–µ, –≥–∞–π–¥—ã –∏ –∫–æ—É—á–∏–Ω–≥': 6,
    '–¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ HR': 7,
    '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ –ø—Ä–æ–¥–∞–∂–∏': 8,
    'E-commerce': 9,
    '–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞': 11,
    '–î–æ–∫—É–º–µ–Ω—Ç—ã': 12,
    'Email': 13,
    '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏': 14,
    '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': 15,
    '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ IT': 16,
    '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å': 17,
    '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö': 18,
    '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏': 19,
    '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ –¥–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞': 20,
    '–ó–¥–æ—Ä–æ–≤—å–µ –∏ —Ñ–∏—Ç–Ω–µ—Å': 21,
    '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π': 22,
    '–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã': 23,
    '–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ lifestyle': 24,
    '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤': 25,
    '–ë–∏–∑–Ω–µ—Å –∏ —Å—Ç–∞—Ä—Ç–∞–ø—ã': 26,
    '–î—Ä—É–≥–æ–µ': 5
  };
  
  let validRecords = [];
  let processedCount = 0;
  let errorCount = 0;
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  for (let i = 1; i < lines.length; i++) {
    const line = lines[i].trim();
    if (!line) continue;
    
    try {
      // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ CSV (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ;)
      const values = line.split(';');
      
      if (values.length < 10) {
        console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É ${i}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–µ–π`);
        continue;
      }
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
      const id = values[0] ? values[0].trim() : null;
      const sortOrder = values[1] ? parseInt(values[1].trim()) || 0 : 0;
      const dateAdded = '2025-06-04'; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–∞—Ç–∞
      const title = values[5] ? values[5].trim().replace(/"/g, '') : `Service_${Date.now()}_${i}`;
      const aiCategory = values[6] ? values[6].trim().replace(/"/g, '') : '';
      const bookmarksCount = values[7] ? parseInt(values[7].trim()) || 0 : 0;
      const shortDescription = values[8] ? values[8].trim().replace(/"/g, '') : '';
      const logoUrl = values[9] ? values[9].trim().replace(/"/g, '') : null;
      const cons = values[10] ? values[10].trim().replace(/"/g, '') : null; // –ú–∏–Ω—É—Å—ã
      const coverUrl = values[11] ? values[11].trim().replace(/"/g, '') : null;
      const pros = values[12] ? values[12].trim().replace(/"/g, '') : null; // –ü–ª—é—Å—ã
      const fullDescription = values[13] ? values[13].trim().replace(/"/g, '') : null;
      const rating = values[14] ? parseFloat(values[14].trim()) || 5.0 : 5.0;
      const serviceUrl = values[16] ? values[16].trim().replace(/"/g, '') : null;
      const price = values[17] ? values[17].trim().replace(/"/g, '') : null;
      const slug = values[18] ? values[18].trim().replace(/"/g, '') : `service-${Date.now()}-${i}`;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      const categoryId = categoryMapping[aiCategory] || 5;
      
      // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      const finalId = id || Date.now() + Math.floor(Math.random() * 1000);
      
      validRecords.push({
        id: finalId,
        sort_order: sortOrder,
        date_added: dateAdded,
        title: title,
        ai_category: aiCategory,
        bookmarks_count: bookmarksCount,
        short_description_ru: shortDescription,
        pros_ru: pros,
        cons_ru: cons,
        logo_url: logoUrl,
        cover_url: coverUrl,
        full_description_ru: fullDescription,
        rating: rating,
        service_url: serviceUrl,
        price: price,
        slug: slug,
        category_id: categoryId
      });
      
      processedCount++;
      
      if (processedCount % 1000 === 0) {
        console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${processedCount} –∑–∞–ø–∏—Å–µ–π...`);
      }
      
    } catch (error) {
      errorCount++;
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ ${i}:`, error.message);
    }
  }
  
  console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–†–ê–ë–û–¢–ö–ò:`);
  console.log(`‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${validRecords.length}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
  
  // –°–æ–∑–¥–∞–µ–º SQL —Ñ–∞–π–ª—ã
  createSQLFiles(validRecords);
}

function createSQLFiles(records) {
  console.log('\nüîß –°–æ–∑–¥–∞–µ–º SQL —Ñ–∞–π–ª—ã –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞...');
  
  // –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (–ø–µ—Ä–≤—ã–µ 1000 –∑–∞–ø–∏—Å–µ–π)
  const testRecords = records.slice(0, 1000);
  createSQLFile(testRecords, 'scripts/TEST_IMPORT_COMPLETE.sql', '–¢–ï–°–¢–û–í–´–ô –ò–ú–ü–û–†–¢ (–ü–ï–†–í–´–ï 1000 –ó–ê–ü–ò–°–ï–ô –° –ü–õ–Æ–°–ê–ú–ò –ò –ú–ò–ù–£–°–ê–ú–ò)');
  
  // –ü–æ–ª–Ω—ã–π —Ñ–∞–π–ª
  createSQLFile(records, 'scripts/MEGA_IMPORT_COMPLETE.sql', '–ü–û–õ–ù–´–ô –ò–ú–ü–û–†–¢ –í–°–ï–• –ó–ê–ü–ò–°–ï–ô –° –ü–õ–Æ–°–ê–ú–ò –ò –ú–ò–ù–£–°–ê–ú–ò');
  
  console.log('\nüéâ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã:');
  console.log('üìÑ TEST_IMPORT_COMPLETE.sql - —Ç–µ—Å—Ç —Å –ø–ª—é—Å–∞–º–∏ –∏ –º–∏–Ω—É—Å–∞–º–∏');
  console.log('üìÑ MEGA_IMPORT_COMPLETE.sql - –ø–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Å –ø–ª—é—Å–∞–º–∏ –∏ –º–∏–Ω—É—Å–∞–º–∏');
}

function createSQLFile(records, filename, description) {
  let sql = `-- ${description}\n-- –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏\n\nBEGIN;\n`;
  
  const batchSize = 1000;
  const totalBatches = Math.ceil(records.length / batchSize);
  
  for (let batchIndex = 0; batchIndex < totalBatches; batchIndex++) {
    const startIndex = batchIndex * batchSize;
    const endIndex = Math.min(startIndex + batchSize, records.length);
    const batchRecords = records.slice(startIndex, endIndex);
    
    sql += `INSERT INTO ai_services (id, sort_order, date_added, title, ai_category, bookmarks_count, short_description_ru, pros_ru, cons_ru, logo_url, cover_url, full_description_ru, rating, service_url, price, slug, category_id) VALUES\n`;
    
    const values = batchRecords.map(record => {
      return `(${record.id}, ${record.sort_order}, '${record.date_added}', ${escapeSQL(record.title)}, ${escapeSQL(record.ai_category)}, ${record.bookmarks_count}, ${escapeSQL(record.short_description_ru)}, ${escapeSQL(record.pros_ru)}, ${escapeSQL(record.cons_ru)}, ${escapeSQL(record.logo_url)}, ${escapeSQL(record.cover_url)}, ${escapeSQL(record.full_description_ru)}, ${record.rating}, ${escapeSQL(record.service_url)}, ${escapeSQL(record.price)}, ${escapeSQL(record.slug)}, ${record.category_id})`;
    });
    
    sql += values.join(',\n') + ';\n\n';
  }
  
  sql += `COMMIT;\n\n-- –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç\nSELECT \n  COUNT(*) as total_services,\n  COUNT(pros_ru) as services_with_pros,\n  COUNT(cons_ru) as services_with_cons,\n  COUNT(short_description_ru) as services_with_descriptions\nFROM ai_services;`;
  
  fs.writeFileSync(filename, sql);
  
  const stats = fs.statSync(filename);
  console.log(`üìÑ ${filename}: ${Math.round(stats.size / 1024)} KB, ${records.length} –∑–∞–ø–∏—Å–µ–π`);
}

function escapeSQL(value) {
  if (value === null || value === undefined) {
    return 'NULL';
  }
  
  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
  const escaped = value.toString().replace(/'/g, "''");
  return `'${escaped}'`;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
createCompleteImport(); 