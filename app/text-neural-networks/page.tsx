'use client'

import { useState, useEffect } from 'react'
import Link from 'next/link'
import Image from 'next/image'
import { Search, Filter, CheckCircle, Users, ExternalLink, Grid, Sparkles, TrendingUp, Clock, FileText, Edit3, MessageSquare, Zap } from 'lucide-react'
import ServiceCard from '@/app/components/ServiceCard'
import { AIServiceWithCategory } from '@/lib/supabase'

const textCapabilities = [
  {
    icon: Edit3,
    title: "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
    description: "–°—Ç–∞—Ç—å–∏, –ø–æ—Å—Ç—ã, –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤, —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"
  },
  {
    icon: MessageSquare,
    title: "–î–∏–∞–ª–æ–≥–∏ –∏ —á–∞—Ç—ã",
    description: "–£–º–Ω—ã–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏, –ø–æ–º–æ—â–Ω–∏–∫–∏, –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—ã –∏ —á–∞—Ç-–±–æ—Ç—ã"
  },
  {
    icon: FileText,
    title: "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
    description: "–£–ª—É—á—à–µ–Ω–∏–µ —Å—Ç–∏–ª—è, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫, —Ä–µ—Ä–∞–π—Ç –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞"
  },
  {
    icon: Zap,
    title: "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
    description: "–ü–µ—Ä–µ–≤–æ–¥—ã, —Ä–µ–∑—é–º–µ, –∞–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤"
  }
]

const topTextServices = [
  {
    name: "ChatGPT",
    description: "–°–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞. –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–µ—Ç —Å—Ç–∞—Ç—å–∏, –ø–æ–º–æ–≥–∞–µ—Ç —Å –∫–æ–¥–æ–º –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏.",
    category: "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ò–ò",
    pricing: "Freemium",
    features: ["–î–∏–∞–ª–æ–≥–∏", "–°—Ç–∞—Ç—å–∏", "–ö–æ–¥", "–ü–µ—Ä–µ–≤–æ–¥—ã"],
    url: "https://chat.openai.com",
    rating: 4.8
  },
  {
    name: "Claude",
    description: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç Anthropic. –û—Ç–ª–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –¥–ª–∏–Ω–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ 200–ö —Ç–æ–∫–µ–Ω–æ–≤.",
    category: "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –ò–ò",
    pricing: "Freemium",
    features: ["–î–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã", "–ê–Ω–∞–ª–∏–∑", "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–≠—Ç–∏–∫–∞"],
    url: "https://claude.ai",
    rating: 4.7
  },
  {
    name: "Jasper",
    description: "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–≥–æ –∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥–∞. –®–∞–±–ª–æ–Ω—ã –¥–ª—è —Ä–µ–∫–ª–∞–º—ã, email-—Ä–∞—Å—Å—ã–ª–æ–∫ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞.",
    category: "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥",
    pricing: "–ü–ª–∞—Ç–Ω–∞—è",
    features: ["–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥", "–†–µ–∫–ª–∞–º–∞", "Email", "SEO"],
    url: "https://jasper.ai",
    rating: 4.5
  },
  {
    name: "Copy.ai",
    description: "–ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥–∞—é—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏, –æ–ø–∏—Å–∞–Ω–∏—è, –ø–æ—Å—Ç—ã –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π –∏ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã.",
    category: "–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥",
    pricing: "Freemium",
    features: ["–ó–∞–≥–æ–ª–æ–≤–∫–∏", "–°–æ—Ü—Å–µ—Ç–∏", "–†–µ–∫–ª–∞–º–∞", "–ü—Ä–æ–¥–∞–∂–∏"],
    url: "https://copy.ai",
    rating: 4.4
  },
  {
    name: "Writesonic",
    description: "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –û—Ç —Å—Ç–∞—Ç–µ–π –¥–æ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 25+ —è–∑—ã–∫–æ–≤.",
    category: "–ö–æ–Ω—Ç–µ–Ω—Ç",
    pricing: "Freemium",
    features: ["–°—Ç–∞—Ç—å–∏", "–ë–ª–æ–≥–∏", "–†–µ–∫–ª–∞–º–∞", "25+ —è–∑—ã–∫–æ–≤"],
    url: "https://writesonic.com",
    rating: 4.3
  },
  {
    name: "Notion AI",
    description: "–ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –≤ Notion. –ü–æ–º–æ–≥–∞–µ—Ç –ø–∏—Å–∞—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏ –ø—Ä—è–º–æ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ.",
    category: "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
    pricing: "Freemium",
    features: ["–ó–∞–º–µ—Ç–∫–∏", "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–°—Ç—Ä—É–∫—Ç—É—Ä–∞"],
    url: "https://notion.so",
    rating: 4.6
  }
]

const useCases = [
  {
    title: "–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥",
    description: "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞—é—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤, —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, email-—Ä–∞—Å—Å—ã–ª–æ–∫",
    tools: ["Jasper", "Copy.ai", "Writesonic"],
    icon: "üìù"
  },
  {
    title: "–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –±–ª–æ–≥–æ–≤",
    description: "–°—Ç–∞—Ç—å–∏, –æ–±–∑–æ—Ä—ã, –≥–∞–π–¥—ã –∏ –¥—Ä—É–≥–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
    tools: ["ChatGPT", "Claude", "Writesonic"],
    icon: "üì∞"
  },
  {
    title: "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏",
    description: "–ü–æ—Å—Ç—ã, –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ, —Ö–µ—à—Ç–µ–≥–∏ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è SMM",
    tools: ["Copy.ai", "Jasper", "ChatGPT"],
    icon: "üì±"
  },
  {
    title: "–î–µ–ª–æ–≤–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞",
    description: "–ü–∏—Å—å–º–∞, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ—Ç—á–µ—Ç—ã –∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
    tools: ["Claude", "ChatGPT", "Notion AI"],
    icon: "üíº"
  },
  {
    title: "–¢–≤–æ—Ä—á–µ—Å–∫–æ–µ –ø–∏—Å—å–º–æ",
    description: "–†–∞—Å—Å–∫–∞–∑—ã, —Å—Ü–µ–Ω–∞—Ä–∏–∏, —Å—Ç–∏—Ö–∏ –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã",
    tools: ["ChatGPT", "Claude", "Writesonic"],
    icon: "üé≠"
  },
  {
    title: "–ü–µ—Ä–µ–≤–æ–¥—ã –∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è",
    description: "–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç–∏–ª—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
    tools: ["ChatGPT", "Claude", "DeepL"],
    icon: "üåç"
  }
]

const faqData = [
  {
    question: "–ö–∞–∫–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞?",
    answer: "–î–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç ChatGPT ‚Äî –æ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –ø–æ–Ω–∏–º–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ–º —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á. –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤—ã–±–∏—Ä–∞–π—Ç–µ Claude, –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ ‚Äî Jasper –∏–ª–∏ Copy.ai."
  },
  {
    question: "–ú–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤?",
    answer: "–î–∞, –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π —Ä–∞–∑—Ä–µ—à–∞—é—Ç –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –û–¥–Ω–∞–∫–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –∏ –≤—Å–µ–≥–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ò–ò-—Ç–µ–∫—Å—Ç—ã –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π."
  },
  {
    question: "–ö–∞–∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –ø–æ–Ω–∏–º–∞—é—Ç —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫?",
    answer: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –æ–±—É—á–µ–Ω—ã –Ω–∞ –º–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Ö–æ—Ä–æ—à–æ –ø–æ–Ω–∏–º–∞—é—Ç —Ä—É—Å—Å–∫–∏–π. ChatGPT, Claude –∏ –¥—Ä—É–≥–∏–µ —Ç–æ–ø–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ —Å–≤–æ–±–æ–¥–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç —Ç–µ–∫—Å—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º, —Å–æ—Ö—Ä–∞–Ω—è—è –≥—Ä–∞–º–º–∞—Ç–∏–∫—É –∏ —Å—Ç–∏–ª–∏—Å—Ç–∏–∫—É."
  },
  {
    question: "–ù—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–µ–∫—Å—Ç—ã –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å?",
    answer: "–î–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –•–æ—Ç—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–µ–∫—Å—Ç—ã –Ω–∞ –ø–ª–∞–≥–∏–∞—Ç –∏ –≤—Å–µ–≥–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç–∏."
  },
  {
    question: "–ö–∞–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –µ—Å—Ç—å —É –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–µ—Ä—Å–∏–π?",
    answer: "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç –ª–∏–º–∏—Ç—ã –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥–µ–Ω—å, –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º. ChatGPT –¥–∞–µ—Ç 40 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ 3 —á–∞—Å–∞, Claude ‚Äî –æ–∫–æ–ª–æ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Å."
  },
  {
    question: "–ú–æ–∂–Ω–æ –ª–∏ –æ–±—É—á–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å —Å–≤–æ–µ–º—É —Å—Ç–∏–ª—é –ø–∏—Å—å–º–∞?",
    answer: "–î–∞, –º–Ω–æ–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Å—Ç–∏–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–º–ø—Ç—ã –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏–º–µ—Ä–æ–≤. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç fine-tuning –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –ø–æ–¥ –≤–∞—à –±—Ä–µ–Ω–¥ –∏–ª–∏ —Å—Ç–∏–ª—å."
  }
]

export default function TextNeuralNetworksPage() {
  const [services, setServices] = useState<AIServiceWithCategory[]>([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedCategory, setSelectedCategory] = useState('')
  const [openFAQ, setOpenFAQ] = useState<number | null>(null)

  useEffect(() => {
    fetchTextServices()
  }, [searchTerm, selectedCategory])

  const fetchTextServices = async () => {
    try {
      setLoading(true)
      const params = new URLSearchParams({
        page: '1',
        limit: '20',
        sort: 'bookmarks_count',
        order: 'desc'
      })

      if (searchTerm) params.append('search', searchTerm)
      if (selectedCategory) params.append('category_id', selectedCategory)

      const response = await fetch(`/api/ai-services?${params}`)
      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö')

      const data = await response.json()
      setServices(data.data || [])
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞:', error)
      setServices([])
    } finally {
      setLoading(false)
    }
  }

  return (
    <>
      {/* JSON-LD —Ä–∞–∑–º–µ—Ç–∫–∞ */}
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{
          __html: JSON.stringify({
            "@context": "https://schema.org",
            "@type": "WebPage",
            "name": "–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ ‚Äî –ò–ò-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã —Ç–µ–∫—Å—Ç–∞",
            "description": "–õ—É—á—à–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞",
            "url": "https://gighub.ru/text-neural-networks",
            "mainEntity": {
              "@type": "FAQPage",
              "mainEntity": faqData.map((faq) => ({
                "@type": "Question",
                "name": faq.question,
                "acceptedAnswer": {
                  "@type": "Answer",
                  "text": faq.answer
                }
              }))
            }
          })
        }}
      />

      <div className="min-h-screen bg-background">
        {/* Breadcrumbs */}
        <nav className="container mx-auto px-6 py-4">
          <ol className="flex items-center space-x-2 text-sm text-text-secondary">
            <li><Link href="/" className="hover:text-accent-primary">–ì–ª–∞–≤–Ω–∞—è</Link></li>
            <li className="mx-2">/</li>
            <li><span className="text-text-primary">–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞</span></li>
          </ol>
        </nav>

        {/* Hero Section */}
        <section className="relative overflow-hidden bg-gradient-to-br from-green-50 via-white to-emerald-50 pt-8">
          <div className="absolute inset-0 bg-grid-pattern opacity-5"></div>
          <div className="relative container mx-auto px-6 py-16">
            <div
              className="text-center max-w-5xl mx-auto"
            >
              <div className="flex items-center justify-center gap-2 mb-6">
                <FileText className="w-8 h-8 text-green-500" />
                <span className="text-green-500 font-semibold">
                  –ò–ò –¥–ª—è —Ç–µ–∫—Å—Ç–∞
                </span>
              </div>
              
              <h1 className="text-4xl md:text-6xl font-bold text-text-primary mb-6">
                –ù–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è <span className="text-gradient bg-gradient-to-r from-green-500 to-emerald-600 bg-clip-text text-transparent">—Ç–µ–∫—Å—Ç–∞</span> ‚Äî<br className="hidden md:block" />
                —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò
              </h1>
              
              <p className="text-xl text-text-secondary mb-8 leading-relaxed max-w-4xl mx-auto">
                –û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –º–æ—â–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞. 
                –û—Ç ChatGPT –¥–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ò–ò-–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–æ–≤ ‚Äî –Ω–∞–π–¥–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–¥–∞—á.
              </p>
              
              <div className="flex items-center justify-center gap-6 text-sm text-text-secondary mb-8">
                <div className="flex items-center gap-2">
                  <Edit3 className="w-4 h-4 text-green-500" />
                  <span>–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</span>
                </div>
                <div className="flex items-center gap-2">
                  <MessageSquare className="w-4 h-4 text-blue-500" />
                  <span>–î–∏–∞–ª–æ–≥–∏ –∏ —á–∞—Ç—ã</span>
                </div>
                <div className="flex items-center gap-2">
                  <Zap className="w-4 h-4 text-purple-500" />
                  <span>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è</span>
                </div>
              </div>

              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <Link href="#services" className="inline-flex items-center px-8 py-4 bg-green-500 text-white rounded-xl hover:bg-green-600 transition-colors font-semibold">
                  –°–º–æ—Ç—Ä–µ—Ç—å —Å–µ—Ä–≤–∏—Å—ã
                </Link>
                <Link href="/ai-services" className="inline-flex items-center px-8 py-4 border-2 border-green-500 text-green-500 rounded-xl hover:bg-green-500 hover:text-white transition-colors font-semibold">
                  –ü–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥
                </Link>
              </div>
            </div>
          </div>
        </section>

        {/* Capabilities Section */}
        <section className="py-20 bg-white">
          <div className="container mx-auto px-6">
            <div
              className="text-center mb-16"
            >
              <h2 className="text-4xl font-bold text-text-primary mb-6">
                –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ <span className="text-green-500">—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ò–ò</span>
              </h2>
              <p className="text-xl text-text-secondary max-w-3xl mx-auto">
                –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —É–º–µ—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ
              </p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
              {textCapabilities.map((capability, index) => (
                <div
                  key={index}
                  className="text-center p-6"
                >
                  <div className="w-16 h-16 bg-green-100 rounded-2xl flex items-center justify-center mx-auto mb-4">
                    <capability.icon className="w-8 h-8 text-green-500" />
                  </div>
                  <h3 className="text-xl font-semibold text-text-primary mb-3">
                    {capability.title}
                  </h3>
                  <p className="text-text-secondary leading-relaxed">
                    {capability.description}
                  </p>
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* Top Services Section */}
        <section className="py-20 bg-gray-50">
          <div className="container mx-auto px-6">
            <div
              className="text-center mb-16"
            >
              <h2 className="text-4xl font-bold text-text-primary mb-6">
                –õ—É—á—à–∏–µ <span className="text-green-500">–Ω–µ–π—Ä–æ—Å–µ—Ç–∏</span> –¥–ª—è —Ç–µ–∫—Å—Ç–∞ 2025
              </h2>
              <p className="text-xl text-text-secondary max-w-3xl mx-auto">
                –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
              </p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12">
              {topTextServices.map((service, index) => (
                <div
                  key={index}
                  className="bg-white rounded-2xl p-6 shadow-lg hover:shadow-xl transition-shadow border border-gray-100"
                >
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-xl font-bold text-text-primary">
                      {service.name}
                    </h3>
                    <div className="flex items-center gap-2">
                      <span className="px-3 py-1 bg-green-100 text-green-700 rounded-full text-sm font-medium">
                        {service.category}
                      </span>
                      <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                        service.pricing === 'Freemium' 
                          ? 'bg-blue-100 text-blue-700' 
                          : 'bg-orange-100 text-orange-700'
                      }`}>
                        {service.pricing}
                      </span>
                    </div>
                  </div>
                  
                  <div className="flex items-center gap-2 mb-3">
                    <div className="flex text-yellow-400">
                      {[...Array(5)].map((_, i) => (
                        <span key={i} className={i < Math.floor(service.rating) ? 'text-yellow-400' : 'text-gray-300'}>‚òÖ</span>
                      ))}
                    </div>
                    <span className="text-sm text-gray-600">{service.rating}</span>
                  </div>
                  
                  <p className="text-text-secondary mb-4 leading-relaxed">
                    {service.description}
                  </p>
                  
                  <div className="flex flex-wrap gap-2 mb-4">
                    {service.features.map((feature, idx) => (
                      <span key={idx} className="px-2 py-1 bg-gray-100 text-gray-700 rounded-lg text-sm">
                        {feature}
                      </span>
                    ))}
                  </div>
                  
                  <a 
                    href={service.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="inline-flex items-center gap-2 text-green-500 hover:text-green-600 font-medium"
                  >
                    –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å <ExternalLink className="w-4 h-4" />
                  </a>
                </div>
              ))}
            </div>

            <div className="text-center">
              <Link href="/ai-services" className="inline-flex items-center px-8 py-4 bg-green-500 text-white rounded-xl hover:bg-green-600 transition-colors font-semibold">
                –°–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
              </Link>
            </div>
          </div>
        </section>

        {/* Use Cases Section */}
        <section className="py-20 bg-white">
          <div className="container mx-auto px-6">
            <div
              className="text-center mb-16"
            >
              <h2 className="text-4xl font-bold text-text-primary mb-6">
                –°—Ñ–µ—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è <span className="text-green-500">—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ò–ò</span>
              </h2>
              <p className="text-xl text-text-secondary max-w-3xl mx-auto">
                –£–∑–Ω–∞–π—Ç–µ, –∫–∞–∫–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–¥–∞—á
              </p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
              {useCases.map((useCase, index) => (
                <div
                  key={index}
                  className="bg-gray-50 rounded-2xl p-6 hover:shadow-lg transition-shadow"
                >
                  <div className="text-4xl mb-4">{useCase.icon}</div>
                  <h3 className="text-xl font-bold text-text-primary mb-3">
                    {useCase.title}
                  </h3>
                  <p className="text-text-secondary mb-4 leading-relaxed">
                    {useCase.description}
                  </p>
                  <div className="space-y-2">
                    <p className="text-sm font-medium text-gray-700">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</p>
                    <div className="flex flex-wrap gap-2">
                      {useCase.tools.map((tool, idx) => (
                        <span key={idx} className="px-3 py-1 bg-green-100 text-green-700 rounded-full text-sm font-medium">
                          {tool}
                        </span>
                      ))}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* Services Catalog Section */}
        <section id="services" className="py-20 bg-gray-50">
          <div className="container mx-auto px-6">
            <div
              className="text-center mb-16"
            >
              <h2 className="text-4xl font-bold text-text-primary mb-6">
                –ü–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ <span className="text-green-500">—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ò–ò</span>
              </h2>
              <p className="text-xl text-text-secondary max-w-3xl mx-auto">
                –ù–∞–π–¥–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
              </p>
            </div>

            {/* Search */}
            <div className="max-w-md mx-auto mb-12">
              <div className="relative">
                <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                <input
                  type="text"
                  placeholder="–ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="w-full pl-12 pr-4 py-4 border-2 border-gray-200 rounded-2xl focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-all duration-200"
                />
              </div>
            </div>

            {/* Services Grid */}
            {loading ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                {[...Array(6)].map((_, index) => (
                  <div key={index} className="bg-white rounded-3xl shadow-lg p-6 animate-pulse">
                    <div className="h-48 bg-gray-200 rounded-xl mb-4"></div>
                    <div className="h-4 bg-gray-200 rounded mb-2"></div>
                    <div className="h-4 bg-gray-200 rounded w-3/4 mb-4"></div>
                    <div className="h-3 bg-gray-200 rounded mb-2"></div>
                    <div className="h-3 bg-gray-200 rounded w-2/3"></div>
                  </div>
                ))}
              </div>
            ) : services.length > 0 ? (
              <div
                className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8"
              >
                {services.map((service, index) => (
                  <ServiceCard
                    key={service.id}
                    {...service}
                    index={index}
                  />
                ))}
              </div>
            ) : (
              <div className="text-center py-20">
                <div className="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
                  <Search className="w-12 h-12 text-gray-400" />
                </div>
                <h3 className="text-2xl font-bold text-text-primary mb-4">
                  –°–µ—Ä–≤–∏—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                </h3>
                <p className="text-text-secondary mb-8 max-w-md mx-auto">
                  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –ø–æ–ª–Ω–æ–º—É –∫–∞—Ç–∞–ª–æ–≥—É
                </p>
                <Link href="/ai-services" className="inline-flex items-center px-6 py-3 bg-green-500 text-white rounded-xl hover:bg-green-600 transition-colors">
                  –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥
                </Link>
              </div>
            )}
          </div>
        </section>

        {/* FAQ Section */}
        <section className="py-20 bg-white">
          <div className="container mx-auto px-6 max-w-4xl">
            <div
              className="text-center mb-16"
            >
              <h2 className="text-4xl font-bold text-text-primary mb-6">
                –í–æ–ø—Ä–æ—Å—ã –æ <span className="text-green-500">—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç—è—Ö</span>
              </h2>
              <p className="text-xl text-text-secondary max-w-3xl mx-auto">
                –û—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞–±–æ—Ç–µ —Å –ò–ò –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
              </p>
            </div>

            <div className="space-y-4">
              {faqData.map((faq, index) => (
                <div
                  key={index}
                  className="bg-gray-50 rounded-2xl shadow-lg border border-gray-100 overflow-hidden"
                >
                  <button
                    onClick={() => setOpenFAQ(openFAQ === index ? null : index)}
                    className="w-full px-8 py-6 text-left hover:bg-gray-100 transition-colors focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-inset"
                  >
                    <div className="flex items-center justify-between">
                      <h3 className="text-lg font-semibold text-text-primary pr-4">
                        {faq.question}
                      </h3>
                      <div
                        className="flex-shrink-0"
                      >
                        <CheckCircle className={`w-6 h-6 ${openFAQ === index ? 'text-green-500' : 'text-gray-400'}`} />
                      </div>
                    </div>
                  </button>
                  
                  {openFAQ === index && (
                    <div
                    >
                      <div className="px-8 pb-6 border-t border-gray-200">
                        <p className="text-text-secondary leading-relaxed pt-4">
                          {faq.answer}
                        </p>
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* CTA Section */}
        <section className="py-20 bg-gradient-to-br from-green-50 to-emerald-50">
          <div className="container mx-auto px-6 text-center">
            <div
              className="max-w-4xl mx-auto"
            >
              <h2 className="text-4xl font-bold text-text-primary mb-6">
                –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å <span className="text-green-500">–∫–æ–Ω—Ç–µ–Ω—Ç</span> —Å –ò–ò
              </h2>
              <p className="text-xl text-text-secondary mb-8 max-w-3xl mx-auto">
                –ú–∏–ª–ª–∏–æ–Ω—ã –∞–≤—Ç–æ—Ä–æ–≤ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. 
                –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∏ —É—Å–∫–æ—Ä—å—Ç–µ —Å–≤–æ—é —Ä–∞–±–æ—Ç—É —Å —Ç–µ–∫—Å—Ç–æ–º –≤ 10 —Ä–∞–∑.
              </p>
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <Link href="/ai-services" className="inline-flex items-center px-8 py-4 bg-green-500 text-white rounded-xl hover:bg-green-600 transition-colors font-semibold">
                  –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥
                </Link>
                <Link href="/free-neural-networks" className="inline-flex items-center px-8 py-4 border-2 border-green-500 text-green-500 rounded-xl hover:bg-green-500 hover:text-white transition-colors font-semibold">
                  –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ò–ò
                </Link>
              </div>
            </div>
          </div>
        </section>
      </div>
    </>
  )
} 